// This file is generated by rust-protobuf 2.0.4. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct DbValue {
    // message fields
    pub field_type: ::std::string::String,
    pub data: ::std::vec::Vec<u8>,
    pub version: i32,
    pub is_native: bool,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl DbValue {
    pub fn new() -> DbValue {
        ::std::default::Default::default()
    }

    // string type = 1;

    pub fn clear_field_type(&mut self) {
        self.field_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: ::std::string::String) {
        self.field_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_type(&mut self) -> &mut ::std::string::String {
        &mut self.field_type
    }

    // Take field
    pub fn take_field_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.field_type, ::std::string::String::new())
    }

    pub fn get_field_type(&self) -> &str {
        &self.field_type
    }

    // bytes data = 2;

    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.data, ::std::vec::Vec::new())
    }

    pub fn get_data(&self) -> &[u8] {
        &self.data
    }

    // int32 version = 3;

    pub fn clear_version(&mut self) {
        self.version = 0;
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: i32) {
        self.version = v;
    }

    pub fn get_version(&self) -> i32 {
        self.version
    }

    // bool is_native = 4;

    pub fn clear_is_native(&mut self) {
        self.is_native = false;
    }

    // Param is passed by value, moved
    pub fn set_is_native(&mut self, v: bool) {
        self.is_native = v;
    }

    pub fn get_is_native(&self) -> bool {
        self.is_native
    }
}

impl ::protobuf::Message for DbValue {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.field_type)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.data)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.version = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_native = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.field_type.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.field_type);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.data);
        }
        if self.version != 0 {
            my_size += ::protobuf::rt::value_size(3, self.version, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.is_native != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.field_type.is_empty() {
            os.write_string(1, &self.field_type)?;
        }
        if !self.data.is_empty() {
            os.write_bytes(2, &self.data)?;
        }
        if self.version != 0 {
            os.write_int32(3, self.version)?;
        }
        if self.is_native != false {
            os.write_bool(4, self.is_native)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DbValue {
        DbValue::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "type",
                    |m: &DbValue| { &m.field_type },
                    |m: &mut DbValue| { &mut m.field_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "data",
                    |m: &DbValue| { &m.data },
                    |m: &mut DbValue| { &mut m.data },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "version",
                    |m: &DbValue| { &m.version },
                    |m: &mut DbValue| { &mut m.version },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "is_native",
                    |m: &DbValue| { &m.is_native },
                    |m: &mut DbValue| { &mut m.is_native },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DbValue>(
                    "DbValue",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DbValue {
        static mut instance: ::protobuf::lazy::Lazy<DbValue> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DbValue,
        };
        unsafe {
            instance.get(DbValue::new)
        }
    }
}

impl ::protobuf::Clear for DbValue {
    fn clear(&mut self) {
        self.clear_field_type();
        self.clear_data();
        self.clear_version();
        self.clear_is_native();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DbValue {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DbValue {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CounterPartySettleInfo {
    // message fields
    pub settled: bool,
    pub tx_hash: ::std::string::String,
    pub output_index: i32,
    pub sends_address: ::std::string::String,
    pub scheduled: bool,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl CounterPartySettleInfo {
    pub fn new() -> CounterPartySettleInfo {
        ::std::default::Default::default()
    }

    // bool settled = 1;

    pub fn clear_settled(&mut self) {
        self.settled = false;
    }

    // Param is passed by value, moved
    pub fn set_settled(&mut self, v: bool) {
        self.settled = v;
    }

    pub fn get_settled(&self) -> bool {
        self.settled
    }

    // string tx_hash = 2;

    pub fn clear_tx_hash(&mut self) {
        self.tx_hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_tx_hash(&mut self, v: ::std::string::String) {
        self.tx_hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tx_hash(&mut self) -> &mut ::std::string::String {
        &mut self.tx_hash
    }

    // Take field
    pub fn take_tx_hash(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.tx_hash, ::std::string::String::new())
    }

    pub fn get_tx_hash(&self) -> &str {
        &self.tx_hash
    }

    // int32 output_index = 3;

    pub fn clear_output_index(&mut self) {
        self.output_index = 0;
    }

    // Param is passed by value, moved
    pub fn set_output_index(&mut self, v: i32) {
        self.output_index = v;
    }

    pub fn get_output_index(&self) -> i32 {
        self.output_index
    }

    // string sends_address = 4;

    pub fn clear_sends_address(&mut self) {
        self.sends_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_sends_address(&mut self, v: ::std::string::String) {
        self.sends_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sends_address(&mut self) -> &mut ::std::string::String {
        &mut self.sends_address
    }

    // Take field
    pub fn take_sends_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sends_address, ::std::string::String::new())
    }

    pub fn get_sends_address(&self) -> &str {
        &self.sends_address
    }

    // bool scheduled = 5;

    pub fn clear_scheduled(&mut self) {
        self.scheduled = false;
    }

    // Param is passed by value, moved
    pub fn set_scheduled(&mut self, v: bool) {
        self.scheduled = v;
    }

    pub fn get_scheduled(&self) -> bool {
        self.scheduled
    }
}

impl ::protobuf::Message for CounterPartySettleInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.settled = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.tx_hash)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.output_index = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sends_address)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.scheduled = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.settled != false {
            my_size += 2;
        }
        if !self.tx_hash.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.tx_hash);
        }
        if self.output_index != 0 {
            my_size += ::protobuf::rt::value_size(3, self.output_index, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.sends_address.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.sends_address);
        }
        if self.scheduled != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.settled != false {
            os.write_bool(1, self.settled)?;
        }
        if !self.tx_hash.is_empty() {
            os.write_string(2, &self.tx_hash)?;
        }
        if self.output_index != 0 {
            os.write_int32(3, self.output_index)?;
        }
        if !self.sends_address.is_empty() {
            os.write_string(4, &self.sends_address)?;
        }
        if self.scheduled != false {
            os.write_bool(5, self.scheduled)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CounterPartySettleInfo {
        CounterPartySettleInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "settled",
                    |m: &CounterPartySettleInfo| { &m.settled },
                    |m: &mut CounterPartySettleInfo| { &mut m.settled },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "tx_hash",
                    |m: &CounterPartySettleInfo| { &m.tx_hash },
                    |m: &mut CounterPartySettleInfo| { &mut m.tx_hash },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "output_index",
                    |m: &CounterPartySettleInfo| { &m.output_index },
                    |m: &mut CounterPartySettleInfo| { &mut m.output_index },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "sends_address",
                    |m: &CounterPartySettleInfo| { &m.sends_address },
                    |m: &mut CounterPartySettleInfo| { &mut m.sends_address },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "scheduled",
                    |m: &CounterPartySettleInfo| { &m.scheduled },
                    |m: &mut CounterPartySettleInfo| { &mut m.scheduled },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CounterPartySettleInfo>(
                    "CounterPartySettleInfo",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CounterPartySettleInfo {
        static mut instance: ::protobuf::lazy::Lazy<CounterPartySettleInfo> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CounterPartySettleInfo,
        };
        unsafe {
            instance.get(CounterPartySettleInfo::new)
        }
    }
}

impl ::protobuf::Clear for CounterPartySettleInfo {
    fn clear(&mut self) {
        self.clear_settled();
        self.clear_tx_hash();
        self.clear_output_index();
        self.clear_sends_address();
        self.clear_scheduled();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CounterPartySettleInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CounterPartySettleInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CrossTxSettlementToWatch {
    // message fields
    pub settle_ends_at: i64,
    pub taker_settle_info: ::protobuf::RepeatedField<CounterPartySettleInfo>,
    pub maker_settle_info: ::protobuf::RepeatedField<CounterPartySettleInfo>,
    pub shift: i64,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl CrossTxSettlementToWatch {
    pub fn new() -> CrossTxSettlementToWatch {
        ::std::default::Default::default()
    }

    // int64 settle_ends_at = 1;

    pub fn clear_settle_ends_at(&mut self) {
        self.settle_ends_at = 0;
    }

    // Param is passed by value, moved
    pub fn set_settle_ends_at(&mut self, v: i64) {
        self.settle_ends_at = v;
    }

    pub fn get_settle_ends_at(&self) -> i64 {
        self.settle_ends_at
    }

    // repeated .bc.CounterPartySettleInfo taker_settle_info = 2;

    pub fn clear_taker_settle_info(&mut self) {
        self.taker_settle_info.clear();
    }

    // Param is passed by value, moved
    pub fn set_taker_settle_info(&mut self, v: ::protobuf::RepeatedField<CounterPartySettleInfo>) {
        self.taker_settle_info = v;
    }

    // Mutable pointer to the field.
    pub fn mut_taker_settle_info(&mut self) -> &mut ::protobuf::RepeatedField<CounterPartySettleInfo> {
        &mut self.taker_settle_info
    }

    // Take field
    pub fn take_taker_settle_info(&mut self) -> ::protobuf::RepeatedField<CounterPartySettleInfo> {
        ::std::mem::replace(&mut self.taker_settle_info, ::protobuf::RepeatedField::new())
    }

    pub fn get_taker_settle_info(&self) -> &[CounterPartySettleInfo] {
        &self.taker_settle_info
    }

    // repeated .bc.CounterPartySettleInfo maker_settle_info = 3;

    pub fn clear_maker_settle_info(&mut self) {
        self.maker_settle_info.clear();
    }

    // Param is passed by value, moved
    pub fn set_maker_settle_info(&mut self, v: ::protobuf::RepeatedField<CounterPartySettleInfo>) {
        self.maker_settle_info = v;
    }

    // Mutable pointer to the field.
    pub fn mut_maker_settle_info(&mut self) -> &mut ::protobuf::RepeatedField<CounterPartySettleInfo> {
        &mut self.maker_settle_info
    }

    // Take field
    pub fn take_maker_settle_info(&mut self) -> ::protobuf::RepeatedField<CounterPartySettleInfo> {
        ::std::mem::replace(&mut self.maker_settle_info, ::protobuf::RepeatedField::new())
    }

    pub fn get_maker_settle_info(&self) -> &[CounterPartySettleInfo] {
        &self.maker_settle_info
    }

    // int64 shift = 4;

    pub fn clear_shift(&mut self) {
        self.shift = 0;
    }

    // Param is passed by value, moved
    pub fn set_shift(&mut self, v: i64) {
        self.shift = v;
    }

    pub fn get_shift(&self) -> i64 {
        self.shift
    }
}

impl ::protobuf::Message for CrossTxSettlementToWatch {
    fn is_initialized(&self) -> bool {
        for v in &self.taker_settle_info {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.maker_settle_info {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.settle_ends_at = tmp;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.taker_settle_info)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.maker_settle_info)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.shift = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.settle_ends_at != 0 {
            my_size += ::protobuf::rt::value_size(1, self.settle_ends_at, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.taker_settle_info {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.maker_settle_info {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.shift != 0 {
            my_size += ::protobuf::rt::value_size(4, self.shift, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.settle_ends_at != 0 {
            os.write_int64(1, self.settle_ends_at)?;
        }
        for v in &self.taker_settle_info {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.maker_settle_info {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.shift != 0 {
            os.write_int64(4, self.shift)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CrossTxSettlementToWatch {
        CrossTxSettlementToWatch::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "settle_ends_at",
                    |m: &CrossTxSettlementToWatch| { &m.settle_ends_at },
                    |m: &mut CrossTxSettlementToWatch| { &mut m.settle_ends_at },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CounterPartySettleInfo>>(
                    "taker_settle_info",
                    |m: &CrossTxSettlementToWatch| { &m.taker_settle_info },
                    |m: &mut CrossTxSettlementToWatch| { &mut m.taker_settle_info },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CounterPartySettleInfo>>(
                    "maker_settle_info",
                    |m: &CrossTxSettlementToWatch| { &m.maker_settle_info },
                    |m: &mut CrossTxSettlementToWatch| { &mut m.maker_settle_info },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "shift",
                    |m: &CrossTxSettlementToWatch| { &m.shift },
                    |m: &mut CrossTxSettlementToWatch| { &mut m.shift },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CrossTxSettlementToWatch>(
                    "CrossTxSettlementToWatch",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CrossTxSettlementToWatch {
        static mut instance: ::protobuf::lazy::Lazy<CrossTxSettlementToWatch> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CrossTxSettlementToWatch,
        };
        unsafe {
            instance.get(CrossTxSettlementToWatch::new)
        }
    }
}

impl ::protobuf::Clear for CrossTxSettlementToWatch {
    fn clear(&mut self) {
        self.clear_settle_ends_at();
        self.clear_taker_settle_info();
        self.clear_maker_settle_info();
        self.clear_shift();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CrossTxSettlementToWatch {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CrossTxSettlementToWatch {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SettleSchedule {
    // message fields
    pub addr_from: ::std::string::String,
    pub addr_to: ::std::string::String,
    pub bridged_chain: ::std::string::String,
    pub bc_height: i64,
    pub bridged_chain_hash: ::std::string::String,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl SettleSchedule {
    pub fn new() -> SettleSchedule {
        ::std::default::Default::default()
    }

    // string addr_from = 1;

    pub fn clear_addr_from(&mut self) {
        self.addr_from.clear();
    }

    // Param is passed by value, moved
    pub fn set_addr_from(&mut self, v: ::std::string::String) {
        self.addr_from = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_addr_from(&mut self) -> &mut ::std::string::String {
        &mut self.addr_from
    }

    // Take field
    pub fn take_addr_from(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.addr_from, ::std::string::String::new())
    }

    pub fn get_addr_from(&self) -> &str {
        &self.addr_from
    }

    // string addr_to = 2;

    pub fn clear_addr_to(&mut self) {
        self.addr_to.clear();
    }

    // Param is passed by value, moved
    pub fn set_addr_to(&mut self, v: ::std::string::String) {
        self.addr_to = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_addr_to(&mut self) -> &mut ::std::string::String {
        &mut self.addr_to
    }

    // Take field
    pub fn take_addr_to(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.addr_to, ::std::string::String::new())
    }

    pub fn get_addr_to(&self) -> &str {
        &self.addr_to
    }

    // string bridged_chain = 3;

    pub fn clear_bridged_chain(&mut self) {
        self.bridged_chain.clear();
    }

    // Param is passed by value, moved
    pub fn set_bridged_chain(&mut self, v: ::std::string::String) {
        self.bridged_chain = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bridged_chain(&mut self) -> &mut ::std::string::String {
        &mut self.bridged_chain
    }

    // Take field
    pub fn take_bridged_chain(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bridged_chain, ::std::string::String::new())
    }

    pub fn get_bridged_chain(&self) -> &str {
        &self.bridged_chain
    }

    // int64 bc_height = 4;

    pub fn clear_bc_height(&mut self) {
        self.bc_height = 0;
    }

    // Param is passed by value, moved
    pub fn set_bc_height(&mut self, v: i64) {
        self.bc_height = v;
    }

    pub fn get_bc_height(&self) -> i64 {
        self.bc_height
    }

    // string bridged_chain_hash = 5;

    pub fn clear_bridged_chain_hash(&mut self) {
        self.bridged_chain_hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_bridged_chain_hash(&mut self, v: ::std::string::String) {
        self.bridged_chain_hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bridged_chain_hash(&mut self) -> &mut ::std::string::String {
        &mut self.bridged_chain_hash
    }

    // Take field
    pub fn take_bridged_chain_hash(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bridged_chain_hash, ::std::string::String::new())
    }

    pub fn get_bridged_chain_hash(&self) -> &str {
        &self.bridged_chain_hash
    }
}

impl ::protobuf::Message for SettleSchedule {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.addr_from)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.addr_to)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bridged_chain)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.bc_height = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bridged_chain_hash)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.addr_from.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.addr_from);
        }
        if !self.addr_to.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.addr_to);
        }
        if !self.bridged_chain.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.bridged_chain);
        }
        if self.bc_height != 0 {
            my_size += ::protobuf::rt::value_size(4, self.bc_height, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.bridged_chain_hash.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.bridged_chain_hash);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.addr_from.is_empty() {
            os.write_string(1, &self.addr_from)?;
        }
        if !self.addr_to.is_empty() {
            os.write_string(2, &self.addr_to)?;
        }
        if !self.bridged_chain.is_empty() {
            os.write_string(3, &self.bridged_chain)?;
        }
        if self.bc_height != 0 {
            os.write_int64(4, self.bc_height)?;
        }
        if !self.bridged_chain_hash.is_empty() {
            os.write_string(5, &self.bridged_chain_hash)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SettleSchedule {
        SettleSchedule::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "addr_from",
                    |m: &SettleSchedule| { &m.addr_from },
                    |m: &mut SettleSchedule| { &mut m.addr_from },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "addr_to",
                    |m: &SettleSchedule| { &m.addr_to },
                    |m: &mut SettleSchedule| { &mut m.addr_to },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "bridged_chain",
                    |m: &SettleSchedule| { &m.bridged_chain },
                    |m: &mut SettleSchedule| { &mut m.bridged_chain },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "bc_height",
                    |m: &SettleSchedule| { &m.bc_height },
                    |m: &mut SettleSchedule| { &mut m.bc_height },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "bridged_chain_hash",
                    |m: &SettleSchedule| { &m.bridged_chain_hash },
                    |m: &mut SettleSchedule| { &mut m.bridged_chain_hash },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SettleSchedule>(
                    "SettleSchedule",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SettleSchedule {
        static mut instance: ::protobuf::lazy::Lazy<SettleSchedule> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SettleSchedule,
        };
        unsafe {
            instance.get(SettleSchedule::new)
        }
    }
}

impl ::protobuf::Clear for SettleSchedule {
    fn clear(&mut self) {
        self.clear_addr_from();
        self.clear_addr_to();
        self.clear_bridged_chain();
        self.clear_bc_height();
        self.clear_bridged_chain_hash();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SettleSchedule {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SettleSchedule {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Schedules {
    // message fields
    pub schedules: ::protobuf::RepeatedField<SettleSchedule>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl Schedules {
    pub fn new() -> Schedules {
        ::std::default::Default::default()
    }

    // repeated .bc.SettleSchedule schedules = 1;

    pub fn clear_schedules(&mut self) {
        self.schedules.clear();
    }

    // Param is passed by value, moved
    pub fn set_schedules(&mut self, v: ::protobuf::RepeatedField<SettleSchedule>) {
        self.schedules = v;
    }

    // Mutable pointer to the field.
    pub fn mut_schedules(&mut self) -> &mut ::protobuf::RepeatedField<SettleSchedule> {
        &mut self.schedules
    }

    // Take field
    pub fn take_schedules(&mut self) -> ::protobuf::RepeatedField<SettleSchedule> {
        ::std::mem::replace(&mut self.schedules, ::protobuf::RepeatedField::new())
    }

    pub fn get_schedules(&self) -> &[SettleSchedule] {
        &self.schedules
    }
}

impl ::protobuf::Message for Schedules {
    fn is_initialized(&self) -> bool {
        for v in &self.schedules {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.schedules)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.schedules {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.schedules {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Schedules {
        Schedules::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SettleSchedule>>(
                    "schedules",
                    |m: &Schedules| { &m.schedules },
                    |m: &mut Schedules| { &mut m.schedules },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Schedules>(
                    "Schedules",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Schedules {
        static mut instance: ::protobuf::lazy::Lazy<Schedules> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Schedules,
        };
        unsafe {
            instance.get(Schedules::new)
        }
    }
}

impl ::protobuf::Clear for Schedules {
    fn clear(&mut self) {
        self.clear_schedules();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Schedules {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Schedules {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x08db.proto\x12\x02bc\"h\n\x07DbValue\x12\x12\n\x04type\x18\x01\x20\
    \x01(\tR\x04type\x12\x12\n\x04data\x18\x02\x20\x01(\x0cR\x04data\x12\x18\
    \n\x07version\x18\x03\x20\x01(\x05R\x07version\x12\x1b\n\tis_native\x18\
    \x04\x20\x01(\x08R\x08isNative\"\xb1\x01\n\x16CounterPartySettleInfo\x12\
    \x18\n\x07settled\x18\x01\x20\x01(\x08R\x07settled\x12\x17\n\x07tx_hash\
    \x18\x02\x20\x01(\tR\x06txHash\x12!\n\x0coutput_index\x18\x03\x20\x01(\
    \x05R\x0boutputIndex\x12#\n\rsends_address\x18\x04\x20\x01(\tR\x0csendsA\
    ddress\x12\x1c\n\tscheduled\x18\x05\x20\x01(\x08R\tscheduled\"\xe6\x01\n\
    \x18CrossTxSettlementToWatch\x12$\n\x0esettle_ends_at\x18\x01\x20\x01(\
    \x03R\x0csettleEndsAt\x12F\n\x11taker_settle_info\x18\x02\x20\x03(\x0b2\
    \x1a.bc.CounterPartySettleInfoR\x0ftakerSettleInfo\x12F\n\x11maker_settl\
    e_info\x18\x03\x20\x03(\x0b2\x1a.bc.CounterPartySettleInfoR\x0fmakerSett\
    leInfo\x12\x14\n\x05shift\x18\x04\x20\x01(\x03R\x05shift\"\xb6\x01\n\x0e\
    SettleSchedule\x12\x1b\n\taddr_from\x18\x01\x20\x01(\tR\x08addrFrom\x12\
    \x17\n\x07addr_to\x18\x02\x20\x01(\tR\x06addrTo\x12#\n\rbridged_chain\
    \x18\x03\x20\x01(\tR\x0cbridgedChain\x12\x1b\n\tbc_height\x18\x04\x20\
    \x01(\x03R\x08bcHeight\x12,\n\x12bridged_chain_hash\x18\x05\x20\x01(\tR\
    \x10bridgedChainHash\"=\n\tSchedules\x120\n\tschedules\x18\x01\x20\x03(\
    \x0b2\x12.bc.SettleScheduleR\tschedulesb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
